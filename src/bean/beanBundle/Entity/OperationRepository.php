<?php

namespace bean\beanBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints\Collection;

/**
 * OperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param Operation $operation
     * @return int
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Doctrine\ORM\TransactionRequiredException
     */
    public function save(Operation $operation)
    {

        $operation->setCompte($this->_em->getRepository("beanBundle:Compte")->find($operation->getCompte()->getId()));
        $compte = $operation->getCompte();
        if ($operation->getType() == "debit") {
            echo "hani f if debit";
            echo $operation->getCompte()->getSolde() - $operation->getMontant() >= 0;
            if ($compte->getSolde() - $operation->getMontant() >= 0) {
                echo "hani f verif solde";
                $compte->setSolde($compte->getSolde() - $operation->getMontant());
                $operation->setCompte($compte);
                $this->_em->persist($operation);
                $this->_em->getRepository("beanBundle:Compte")->_em->merge($compte);
                $this->_em->flush();
                return 1;
            }
            return -1;
        } else {
            $compte = $operation->getCompte();
            $compte->setSolde($compte->getSolde() + $operation->getMontant());
            $operation->setCompte($compte);
            $this->_em->persist($operation);
            $this->_em->getRepository("beanBundle:Compte")->_em->merge($compte);
            $this->_em->flush();
            return 2;
        }
    }

    /**
     * @param Compte $compte
     * @return array
     */
    public function findOperationsByC(Compte $compte)
    {
        // return $this->_em->createQuery("SELECT oop from beanBundle:Operation oop WHERE oop.compte.id=".$compte->getId())->getResult();
//        $qb = $this->_em->createQueryBuilder();
//        $qb->select("oop");
//        // quelques op
//        $qb->from("beanBundle:Operation");
//
//        $qb->getQuery()->execute();
//        $col = new ArrayCollection($array);
//        $qb = $this->createQueryBuilder('qb');
//        $qb->select('op')
//            ->from('beanBundle:Operation', 'op')
//            ->where('op.compte=' . $compte->getId());
//        $query = $qb->getQuery()->getResult();
    }


    /**
     * @param Compte $compte
     * @return ArrayCollection
     */
    public function findOperationsByCompte(Compte $compte)
    {
//        $qb = $this->createQueryBuilder('op');
//        $qb->where('op.compte=' . $compte->getId());
//        $query = $qb->getQuery()->getResult();

        $qb = $this->_em->createQueryBuilder();
        $qb->select('op')
            ->from('beanBundle:Operation', 'op')
            ->join('op.compte', 'c')
            ->where('c.id=' . $compte->getId());
        $query = $qb->getQuery()->getResult();
        // var_dump($query);
        return new ArrayCollection($query);
    }

    public function testFind(Compte $compte)
    {
        $qb = $this->createQueryBuilder('c');

//        $qb->where($qb->expr()->between('c.id', 1, 9));
//        $qb->where($qb->expr());

    }

    public function removeOperationByCompte($idCompte)
    {
        //DQL does not support joins in DELETE and UPDATEs, even if the underlaying database, like MySQL, supports it
        $rslts = $this->_em
            ->createQueryBuilder()
            ->select('op')
            ->from('beanBundle:Operation', 'op')
            ->Join('op.compte', 'c')
            ->where('c.id=' . $idCompte)->getQuery()->getResult();
        foreach ($rslts as $rslt) {
            $this->_em->remove($rslt);
        }
//        $qb = $this->_em->createQueryBuilder();
//        $qb->delete('beanBundle:Operation', 'op')
//            ->join('op.compte', 'c')
//            ->where('c=' . $idCompte);
//        $qb->getQuery()->execute();
    }


}
